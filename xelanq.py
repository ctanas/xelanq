## XElanQ v0.1a
#  Python script for creating a CSV file from an output generated by
#  the software of Perkin Elmer Elan DRC II Inductively Coupled
#  Plasma Mass Spectrometer (ICP-MS)

#  Currently only works for (certain types of) TotalQuant report files

import os

#Finding the .rep file in current directory
asps = []
for root, dirs, files in os.walk('./'):
    for file in files:
        if file.endswith('.rep'):
            asps.append(file)
for i in range (0, len(asps)):
    print (i,": ",asps[i], sep='')
x = input('Which file? ')

repfilename = str(asps[int(x)])
# .rep file that will be processed

csvfilename = repfilename.split('.')[0].rstrip()+".csv"
# Output file (no need for this to be editable)
# Just changed the extension from .rep to .csv

filetype = "TQ"
# !!! NEED DECISION FOR FILETYPE VALUE !!!
# based on the content of the file

def TotalQuantGO():

    weekdays = ["Monday","Tuesday","Wednesday","Thursday",
                "Friday","Saturday","Sunday"]
    # Weekdays are used as anchor, for guiding our search withint the file;

    elements = ["ppb","Li","Be","B","C","N","O","F","Ne","Na","Mg","Al","Si",
                "P","S","Cl","Ar","K","Ca","Sc","Ti","V","Cr","Mn","Fe",
                "Co","Ni","Cu","Zn","Ga","Ge","As","Se","Br","Kr","Rb",
                "Sr","Y","Zr","Nb","Mo","Ru","Rh","Pd","Ag","Cd","In","Sn",
                "Sb","Te","I","Xe","Cs","Ba","La","Ce","Pr","Nd","Sm","Eu",
                "Gd","Tb","Dy","Ho","Er","Tm","Yb","Lu","Hf","Ta","W","Re",
                "Os","Ir","Pt","Au","Hg","Tl","Pb","Bi","Th","U"]
    # All the chemical elements present in the output file;
    # There's a placeholder in the first position,
    # to match the elements list on the fist column;

    el_exception = ["C", "N", "O", "F", "Ne", "P",
                    "S", "Cl", "Ar", "Kr", "Xe"]
    # elements we don't want in the output file
    # since they have no meaning for ICP-MS

    c_sample = 0 # sample counter, it's initialized to zero;

    ## Opening the file and reading its content to an array

    with open(repfilename, 'r') as f:
        content = f.readlines()
        content = [x.strip() for x in content]

    for i in range (0, len(content)):
        if (weekdays[0] in content[i]) or (weekdays[1] in content[i]) or \
           (weekdays[2] in content[i]) or (weekdays[3] in content[i]) or \
           (weekdays[4] in content[i]) or (weekdays[5] in content[i]) or \
           (weekdays[6] in content[i]):
            c_sample = c_sample+1

    w, h = len(elements), c_sample
    sample = [[0 for x in range(w)] for y in range (h)]
    # Initialization of the array containing the data based on
    # number of samples present in the file and the
    # number of elements detected

    for i in range (0, len(content)):
        if (weekdays[0] in content[i]) or (weekdays[1] in content[i]) or \
           (weekdays[2] in content[i]) or (weekdays[3] in content[i]) or \
           (weekdays[4] in content[i]) or (weekdays[5] in content[i]) or \
           (weekdays[6] in content[i]):
            for j in range (1, 30):
                if ((content[i+j].split(',')[0].rstrip()=="Li") and
                (content[i+j+1].split(',')[0].rstrip()=="Be")): break
    gap1=j
    # The gap between the date and the first value for Li
    # This is needed to know where to start reading the concentration values

    c_sample = 0 # reseting the counter, it's needed again

    for i in range (0, len(content)):
        if (weekdays[0] in content[i]) or (weekdays[1] in content[i]) or \
           (weekdays[2] in content[i]) or (weekdays[3] in content[i]) or \
           (weekdays[4] in content[i]) or (weekdays[5] in content[i]) or \
           (weekdays[6] in content[i]):
            sample[c_sample][0]=content[i-1]
            # the index 0 will hold the sample code,
            # the concentration follows from index 1 onwards;

            for j in range (1, len(elements)):
                temp_sample=content[i+gap1+j-1].split(',')[1].rstrip()
                try:
                    temp_value=float(temp_sample)
                    if (temp_value<100): sample[c_sample][j]=str(round(temp_value, 1))
                    if (temp_value>=100): sample[c_sample][j]=str(int(temp_value))
                except ValueError: # if there's an error, then we don't apply rounding
                    sample[c_sample][j]=temp_sample
                    # Getting the concentration value from the file,
                    # cps detector values and other info are discarded;
                    # Then it rounds the values >100 ppb to no decimal,
                    # and it rounds to one decimal for values <100ppb
            c_sample = c_sample+1

    ## Writing the output file
    file = open(csvfilename,"w")
    for j in range (0, 82):
        if (elements[j] in el_exception): continue
        # Skipping the elements that make no sense
        for k in range (0, c_sample):
            if k==0:
                file.write(elements[j])
                file.write(";")
            file.write(sample[k][j])
            file.write(";")
        file.write("\n")
    file.close()

    print ("Processed", c_sample, "samples in", len(content), "lines.")


def QuantitativeGO():
    print ("Not yet implemented!")

if filetype == "TQ": TotalQuantGO()
elif file == "CC": QuantitativeGO()
else: print ("Unrecognized filetype, sorry")

print ("All done!")
