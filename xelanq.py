## XElanQ v0.1
#  Python script for creating a CSV file from an output generated by
#  the software of Perkin Elmer Elan DRC II Inductively Coupled 
#  Plasma Mass Spectrometer (ICP-MS)

#  Currently only works for (certain types of) TotalQuant report files

## Some variable declaration and initialization

gap1 = 17 
# Number of lines between the date and "Li"; 
# (could be determined automatically in the future?);

gap2 = 82 
# Number of lines between Li and U;
# should not change with format change;

weekdays = ["Monday","Tuesday","Wednesday","Thursday",
            "Friday","Saturday","Sunday"] 
# Weekdays are used as anchor, for guiding our search;

elements = ["","Li","Be","B","C","N","O","F","Ne","Na","Mg","Al","Si",
            "P","S","Cl","Ar","K","Ca","Sc","Ti","V","Cr","Mn","Fe",
            "Co","Ni","Cu","Zn","Ga","Ge","As","Se","Br","Kr","Rb",
            "Sr","Y","Zr","Nb","Mo","Ru","Rh","Pd","Ag","Cd","In","Sn",
            "Sb","Te","I","Xe","Cs","Ba","La","Ce","Pr","Nd","Sm","Eu",
            "Gd","Tb","Dy","Ho","Er","Tm","Yb","Lu","Hf","Ta","W","Re",
            "Os","Ir","Pt","Au","Hg","Tl","Pb","Bi","Th","U"] 
# All the chemical elements present in the output file; 
# There's a placeholder in the first position, 
# to match the elements list on the fist column;

el_exception = ["C", "N", "O", "F", "Ne", "P", 
                "S", "Cl", "Ar", "Kr", "Xe"] 
# elements we don't want in the output file;

## Opening the file and reading its content to a variable

with open('tq.rep', 'r') as f:
    content = f.readlines()
    content = [x.strip() for x in content]

print ("Number of lines in the file: ", len(content)) 
# debug purpose only;

## Main section
# that probably should be included in a function?

c_sample = 0 # sample counter, it's initialized to zero;

w, h = 1000, 1000 # needs optimizing;
sample = [[0 for x in range(w)] for y in range (h)] 
# Initial initialization, maximum 1000 samples/file, and it
# should be enough;
# Could be determined automatically in the future?

for i in range (0, len(content)):
    if (weekdays[0] in content[i]) or (weekdays[1] in content[i]) or \
       (weekdays[2] in content[i]) or (weekdays[3] in content[i]) or \
       (weekdays[4] in content[i]) or (weekdays[5] in content[i]) or \
       (weekdays[6] in content[i]):
        sample[c_sample][0]=content[i-1] 
        # the 0-index will hold the sample code, 
        # the concentration follows from 1 onwards;
        for j in range (1, gap2):
            sample[c_sample][j]=content[i+gap1+j-1].split(',')[1] 
            # this only gets the concentration value, 
            # cps detector values are discarded;
        c_sample = c_sample+1

print ("Number of samples: ", c_sample) # debug purpose only;

## Writing the output file
file = open("output.csv","w")
for j in range (0, 82):
    if (elements[j] in el_exception): continue
    for k in range (0, c_sample):
        if k==0:
            file.write(elements[j])
            file.write(",")
        file.write(sample[k][j])
        file.write(",")
    file.write("\n")
file.close()

print ("All done!") 
# debug purpose only, marking the end of application run.
